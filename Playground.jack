class Playground{
    static int bestScore;        // record the best score of the user
    static Playground instance;  // ths singelon, a playground instance
    field int generatePoleTimer; // decide whether to generate a new pole
    field int moveTimer;        // decide whether to move the poles 
    field int score;            // record the current score of the user
    field int left;             // the left grid of bee
    field List listOfPoles;     //  a list of poles
    field Bee bee;              // a lovely bee

    /** construct a new Playground*/
    constructor Playground new(){
        do Screen.clearScreen();
        let listOfPoles = List.new();
        let left = 126;
        let bee = Bee.new(left, 127, 4);
        let generatePoleTimer = 0;
        let moveTimer = 0;
        let score = 0;
        let bestScore = 0;
        return this;
    }

    /** dispose this playground*/
    method void dispose(){
        do bee.dispose();
        do listOfPoles.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** create an instance of playground and stores it*/
    function void newInstance(){
        let instance = Playground.new();
        return;
    }

    /** returns the single instance of this playground */
    function Playground getInstance(){
        return instance;
    }
    /** access the bestScore */
    function int getBestScore(){
        return bestScore;
    }
    /** run a Flappy Game*/
    method int run(){
        var boolean exit;
        let exit = false;
        while(~exit){
            do changeBeeState();
            do generatePoles();
            let exit = exit | (~bee.move()); // if bee has invalid move, then exit
            do movePoles();
            let score = score + listOfPoles.checkScore(left);
            let exit = exit | listOfPoles.checkCrash(bee); // if the bee has crash the poles, exit
            do printScore();
            do Sys.wait(25);
        }
        return score;
    }

    /** to generate a new Pole */
    method void generatePoles(){
        var Pole newPole;
        var int randomNumber;
        if(generatePoleTimer = 0){
            do listOfPoles.pushBackRandomPole();
        }
        let generatePoleTimer = generatePoleTimer + 1;
        if(generatePoleTimer> 64){
            let randomNumber = Random.dist(0, 2);
            if(randomNumber = 1){
                let generatePoleTimer = 0;
            }
        }
        return;
    }

    /** to move all poles in the list */
    method void movePoles(){
        if(moveTimer = 0){
            do listOfPoles.hideAllPole();
            do listOfPoles.moveAllPole();
            do listOfPoles.removeInvalid();
            do listOfPoles.drawAllPole();
        }
        let moveTimer = moveTimer + 1;
        if(moveTimer = 3){
            let moveTimer = 0;
        }
        return;
    }
    /** print the score of the current game on screen */
    method void printScore(){
        do Output.moveCursor(0, 53);
        do Output.printString("Score:0");
        do Output.moveCursor(0, 60);
        do Output.printInt(score);
        return;
    }

    /** deal with user input */
    method void changeBeeState(){
        var char key;
        let key = Keyboard.keyPressed();
        if(key = 32){
            do bee.setState(1);
        }
        else{
            do bee.setState(2);
        }
        return;
    }
}